정규표현식

문자열에서 특정한 문자를 찾아내는 도구


정규표현식 리터럴

var pattern = /a/;


정규표현식 객체 생성자

var pattern = new RegExp('a');


RegExp.exec()

var pattern = new RegExp('a');
console.log(pattern.exec('abcdef')); // ["a"]
console.log(pattern.exec('bcdefg')); // null

var pattern = new RegExp('a.');
console.log(pattern.exec('abcdef')); // ["ab"]


RegExp.test()

var pattern = new RegExp('a');
console.log(pattern.test('abcdef')); // true
console.log(pattern.test('bcdefg')); // false


String.match()

var pattern = /a/;

var str = 'abcdef';
console.log(str.match(pattern)); // ["a"]

var str = 'bcdefg';
console.log(str.match(pattern)); // null


String.replace()

var pattern = /a/;
var str = 'abcdef';
String.replace(pattern, 'A'); // Abcedf


정규표현식 옵션 : i, g

var xi = /a/;
console.log("Abcde".match(xi)); // null

var oi = /a/i;
console.log("Abced".match(oi)); // ["A"]

// i를 붙이면 대소문자를 구분하지 않는다.


var xg = /a/;
console.log("abcdea".match(xg)); // ["a"]

var og = /a/g;
console.log("abcdea".match(og)); // ["a", "a"]

// g를 붙이면 검색된 모든 결과를 리턴한다.

var ig = /a/ig;
console.log("AabcdAa".match(ig)); // ["A", "a", "A", "a"]


캡쳐

(\w+)\s(\w+) : word + space + word

var pattern = /(\w+)\s(\w+)/;
var str = "coding everybody";
var result = str.replace(pattern, "$2, $1");
console.log(result);
// everybody, coding


치환

var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim;
var content = '네이버 : http://naver.com 입니다. ';
var result = content.replace(urlPattern, function(url){ return '<a href="'+url+'">'+url+'</a>'; });
console.log(result);

